/*
 * generated by Xtext
 */
package com.softicar.sqml.serializer;

import com.google.inject.Inject;
import com.softicar.sqml.model.conditions.ConditionsPackage;
import com.softicar.sqml.model.conditions.SqmlAnd;
import com.softicar.sqml.model.conditions.SqmlBetween;
import com.softicar.sqml.model.conditions.SqmlComparison;
import com.softicar.sqml.model.conditions.SqmlExists;
import com.softicar.sqml.model.conditions.SqmlIn;
import com.softicar.sqml.model.conditions.SqmlIsNull;
import com.softicar.sqml.model.conditions.SqmlLike;
import com.softicar.sqml.model.conditions.SqmlNot;
import com.softicar.sqml.model.conditions.SqmlOr;
import com.softicar.sqml.model.conditions.SqmlRegexp;
import com.softicar.sqml.model.expressions.ExpressionsPackage;
import com.softicar.sqml.model.expressions.SqmlAddition;
import com.softicar.sqml.model.expressions.SqmlCase;
import com.softicar.sqml.model.expressions.SqmlCaseWhen;
import com.softicar.sqml.model.expressions.SqmlGroupConcat;
import com.softicar.sqml.model.expressions.SqmlIf;
import com.softicar.sqml.model.expressions.SqmlIfNull;
import com.softicar.sqml.model.expressions.SqmlMultiplication;
import com.softicar.sqml.model.expressions.SqmlNegation;
import com.softicar.sqml.model.expressions.SqmlPath;
import com.softicar.sqml.model.expressions.SqmlRowConstructor;
import com.softicar.sqml.model.expressions.SqmlStaticAnd;
import com.softicar.sqml.model.expressions.SqmlStaticIf;
import com.softicar.sqml.model.expressions.SqmlStaticIsEmpty;
import com.softicar.sqml.model.expressions.SqmlStaticIsNull;
import com.softicar.sqml.model.expressions.SqmlStaticIsTrue;
import com.softicar.sqml.model.expressions.SqmlStaticOr;
import com.softicar.sqml.model.expressions.SqmlStaticParentheses;
import com.softicar.sqml.model.expressions.SqmlStaticVariableReference;
import com.softicar.sqml.model.expressions.SqmlSubSelect;
import com.softicar.sqml.model.expressions.SqmlValueReference;
import com.softicar.sqml.model.files.FilesPackage;
import com.softicar.sqml.model.files.SqmlFile;
import com.softicar.sqml.model.files.SqmlImport;
import com.softicar.sqml.model.files.SqmlPackageDeclaration;
import com.softicar.sqml.model.functions.FunctionsPackage;
import com.softicar.sqml.model.functions.SqmlFunction;
import com.softicar.sqml.model.functions.SqmlFunctionCall;
import com.softicar.sqml.model.functions.SqmlFunctionParameter;
import com.softicar.sqml.model.functions.SqmlSql;
import com.softicar.sqml.model.functions.SqmlSqlId;
import com.softicar.sqml.model.functions.SqmlSqlKeyword;
import com.softicar.sqml.model.functions.SqmlSqlNumberLiteral;
import com.softicar.sqml.model.functions.SqmlSqlStringLiteral;
import com.softicar.sqml.model.functions.SqmlSqlSymbol;
import com.softicar.sqml.model.literals.LiteralsPackage;
import com.softicar.sqml.model.literals.SqmlBooleanLiteral;
import com.softicar.sqml.model.literals.SqmlDecimalLiteral;
import com.softicar.sqml.model.literals.SqmlDoubleLiteral;
import com.softicar.sqml.model.literals.SqmlFloatLiteral;
import com.softicar.sqml.model.literals.SqmlIntegerLiteral;
import com.softicar.sqml.model.literals.SqmlLongLiteral;
import com.softicar.sqml.model.literals.SqmlStringLiteral;
import com.softicar.sqml.model.queries.QueriesPackage;
import com.softicar.sqml.model.queries.SqmlQuery;
import com.softicar.sqml.model.queries.SqmlQueryParameter;
import com.softicar.sqml.model.selects.SelectsPackage;
import com.softicar.sqml.model.selects.SqmlForeignKeyVariable;
import com.softicar.sqml.model.selects.SqmlFromClause;
import com.softicar.sqml.model.selects.SqmlGroupByClause;
import com.softicar.sqml.model.selects.SqmlHavingClause;
import com.softicar.sqml.model.selects.SqmlJoinClause;
import com.softicar.sqml.model.selects.SqmlOrderByClause;
import com.softicar.sqml.model.selects.SqmlOrderByExpression;
import com.softicar.sqml.model.selects.SqmlSelect;
import com.softicar.sqml.model.selects.SqmlSelectClause;
import com.softicar.sqml.model.selects.SqmlSelectColumn;
import com.softicar.sqml.model.selects.SqmlSelectElse;
import com.softicar.sqml.model.selects.SqmlSelectElseIf;
import com.softicar.sqml.model.selects.SqmlSelectIf;
import com.softicar.sqml.model.selects.SqmlSubSelectVariable;
import com.softicar.sqml.model.selects.SqmlTableVariable;
import com.softicar.sqml.model.selects.SqmlWhereClause;
import com.softicar.sqml.model.tables.SqmlIndexKey;
import com.softicar.sqml.model.tables.SqmlLiteralDefaultValue;
import com.softicar.sqml.model.tables.SqmlRowConstructorDefaultValue;
import com.softicar.sqml.model.tables.SqmlTable;
import com.softicar.sqml.model.tables.SqmlTableColumn;
import com.softicar.sqml.model.tables.SqmlTableRow;
import com.softicar.sqml.model.tables.SqmlTableRowValue;
import com.softicar.sqml.model.tables.SqmlUniqueKey;
import com.softicar.sqml.model.tables.SqmlValueReferenceDefaultValue;
import com.softicar.sqml.model.tables.TablesPackage;
import com.softicar.sqml.model.types.SqmlEnum;
import com.softicar.sqml.model.types.SqmlEnumerator;
import com.softicar.sqml.model.types.SqmlTypeReference;
import com.softicar.sqml.model.types.SqmlValueType;
import com.softicar.sqml.model.types.TypesPackage;
import com.softicar.sqml.services.SqmlGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SqmlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SqmlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ConditionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ConditionsPackage.SQML_AND:
				sequence_SqmlAnd(context, (SqmlAnd) semanticObject); 
				return; 
			case ConditionsPackage.SQML_BETWEEN:
				sequence_SqmlCondition(context, (SqmlBetween) semanticObject); 
				return; 
			case ConditionsPackage.SQML_COMPARISON:
				sequence_SqmlCondition(context, (SqmlComparison) semanticObject); 
				return; 
			case ConditionsPackage.SQML_EXISTS:
				sequence_SqmlCondition(context, (SqmlExists) semanticObject); 
				return; 
			case ConditionsPackage.SQML_IN:
				sequence_SqmlCondition(context, (SqmlIn) semanticObject); 
				return; 
			case ConditionsPackage.SQML_IS_NULL:
				sequence_SqmlCondition(context, (SqmlIsNull) semanticObject); 
				return; 
			case ConditionsPackage.SQML_LIKE:
				sequence_SqmlCondition(context, (SqmlLike) semanticObject); 
				return; 
			case ConditionsPackage.SQML_NOT:
				sequence_SqmlCondition(context, (SqmlNot) semanticObject); 
				return; 
			case ConditionsPackage.SQML_OR:
				sequence_SqmlOr(context, (SqmlOr) semanticObject); 
				return; 
			case ConditionsPackage.SQML_REGEXP:
				sequence_SqmlCondition(context, (SqmlRegexp) semanticObject); 
				return; 
			}
		else if (epackage == ExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ExpressionsPackage.SQML_ADDITION:
				sequence_SqmlAddition(context, (SqmlAddition) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_CASE:
				sequence_SqmlCase(context, (SqmlCase) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_CASE_WHEN:
				sequence_SqmlCaseWhen(context, (SqmlCaseWhen) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_GROUP_CONCAT:
				sequence_SqmlGroupConcat(context, (SqmlGroupConcat) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_IF:
				sequence_SqmlIf(context, (SqmlIf) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_IF_NULL:
				sequence_SqmlIfNull(context, (SqmlIfNull) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_MULTIPLICATION:
				sequence_SqmlMultiplication(context, (SqmlMultiplication) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_NEGATION:
				sequence_SqmlNegation(context, (SqmlNegation) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_PATH:
				sequence_SqmlPath(context, (SqmlPath) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_ROW_CONSTRUCTOR:
				sequence_SqmlRowConstructor(context, (SqmlRowConstructor) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_AND:
				sequence_SqmlStaticAnd(context, (SqmlStaticAnd) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_IF:
				sequence_SqmlStaticIf(context, (SqmlStaticIf) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_IS_EMPTY:
				sequence_SqmlStaticIsEmpty(context, (SqmlStaticIsEmpty) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_IS_NULL:
				sequence_SqmlStaticIsNull(context, (SqmlStaticIsNull) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_IS_TRUE:
				sequence_SqmlStaticIsTrue(context, (SqmlStaticIsTrue) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_OR:
				sequence_SqmlStaticOr(context, (SqmlStaticOr) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_PARENTHESES:
				sequence_SqmlStaticParentheses(context, (SqmlStaticParentheses) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_STATIC_VARIABLE_REFERENCE:
				sequence_SqmlStaticVariableReference(context, (SqmlStaticVariableReference) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_SUB_SELECT:
				sequence_SqmlSubSelect(context, (SqmlSubSelect) semanticObject); 
				return; 
			case ExpressionsPackage.SQML_VALUE_REFERENCE:
				sequence_SqmlValueReference(context, (SqmlValueReference) semanticObject); 
				return; 
			}
		else if (epackage == FilesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FilesPackage.SQML_FILE:
				sequence_SqmlFile(context, (SqmlFile) semanticObject); 
				return; 
			case FilesPackage.SQML_IMPORT:
				sequence_SqmlImport(context, (SqmlImport) semanticObject); 
				return; 
			case FilesPackage.SQML_PACKAGE_DECLARATION:
				sequence_SqmlPackageDeclaration(context, (SqmlPackageDeclaration) semanticObject); 
				return; 
			}
		else if (epackage == FunctionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FunctionsPackage.SQML_FUNCTION:
				sequence_SqmlFunction(context, (SqmlFunction) semanticObject); 
				return; 
			case FunctionsPackage.SQML_FUNCTION_CALL:
				sequence_SqmlFunctionCall(context, (SqmlFunctionCall) semanticObject); 
				return; 
			case FunctionsPackage.SQML_FUNCTION_PARAMETER:
				sequence_SqmlFunctionParameter(context, (SqmlFunctionParameter) semanticObject); 
				return; 
			case FunctionsPackage.SQML_SQL:
				sequence_SqmlSql(context, (SqmlSql) semanticObject); 
				return; 
			case FunctionsPackage.SQML_SQL_ID:
				sequence_SqmlSqlId(context, (SqmlSqlId) semanticObject); 
				return; 
			case FunctionsPackage.SQML_SQL_KEYWORD:
				sequence_SqmlSqlKeyword(context, (SqmlSqlKeyword) semanticObject); 
				return; 
			case FunctionsPackage.SQML_SQL_NUMBER_LITERAL:
				sequence_SqmlSqlNumberLiteral(context, (SqmlSqlNumberLiteral) semanticObject); 
				return; 
			case FunctionsPackage.SQML_SQL_STRING_LITERAL:
				sequence_SqmlSqlStringLiteral(context, (SqmlSqlStringLiteral) semanticObject); 
				return; 
			case FunctionsPackage.SQML_SQL_SYMBOL:
				sequence_SqmlSqlSymbol(context, (SqmlSqlSymbol) semanticObject); 
				return; 
			}
		else if (epackage == LiteralsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LiteralsPackage.SQML_BOOLEAN_LITERAL:
				sequence_SqmlBooleanLiteral(context, (SqmlBooleanLiteral) semanticObject); 
				return; 
			case LiteralsPackage.SQML_DECIMAL_LITERAL:
				sequence_SqmlDecimalLiteral(context, (SqmlDecimalLiteral) semanticObject); 
				return; 
			case LiteralsPackage.SQML_DOUBLE_LITERAL:
				sequence_SqmlDoubleLiteral(context, (SqmlDoubleLiteral) semanticObject); 
				return; 
			case LiteralsPackage.SQML_FLOAT_LITERAL:
				sequence_SqmlFloatLiteral(context, (SqmlFloatLiteral) semanticObject); 
				return; 
			case LiteralsPackage.SQML_INTEGER_LITERAL:
				sequence_SqmlIntegerLiteral(context, (SqmlIntegerLiteral) semanticObject); 
				return; 
			case LiteralsPackage.SQML_LONG_LITERAL:
				sequence_SqmlLongLiteral(context, (SqmlLongLiteral) semanticObject); 
				return; 
			case LiteralsPackage.SQML_STRING_LITERAL:
				sequence_SqmlStringLiteral(context, (SqmlStringLiteral) semanticObject); 
				return; 
			}
		else if (epackage == QueriesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QueriesPackage.SQML_QUERY:
				sequence_SqmlQuery(context, (SqmlQuery) semanticObject); 
				return; 
			case QueriesPackage.SQML_QUERY_PARAMETER:
				sequence_SqmlQueryParameter(context, (SqmlQueryParameter) semanticObject); 
				return; 
			}
		else if (epackage == SelectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SelectsPackage.SQML_FOREIGN_KEY_VARIABLE:
				sequence_SqmlForeignKeyVariable(context, (SqmlForeignKeyVariable) semanticObject); 
				return; 
			case SelectsPackage.SQML_FROM_CLAUSE:
				sequence_SqmlFromClause(context, (SqmlFromClause) semanticObject); 
				return; 
			case SelectsPackage.SQML_GROUP_BY_CLAUSE:
				sequence_SqmlGroupByClause(context, (SqmlGroupByClause) semanticObject); 
				return; 
			case SelectsPackage.SQML_HAVING_CLAUSE:
				sequence_SqmlHavingClause(context, (SqmlHavingClause) semanticObject); 
				return; 
			case SelectsPackage.SQML_JOIN_CLAUSE:
				sequence_SqmlJoinClause(context, (SqmlJoinClause) semanticObject); 
				return; 
			case SelectsPackage.SQML_ORDER_BY_CLAUSE:
				sequence_SqmlOrderByClause(context, (SqmlOrderByClause) semanticObject); 
				return; 
			case SelectsPackage.SQML_ORDER_BY_EXPRESSION:
				sequence_SqmlOrderByExpression(context, (SqmlOrderByExpression) semanticObject); 
				return; 
			case SelectsPackage.SQML_SELECT:
				sequence_SqmlSelect(context, (SqmlSelect) semanticObject); 
				return; 
			case SelectsPackage.SQML_SELECT_CLAUSE:
				sequence_SqmlSelectClause(context, (SqmlSelectClause) semanticObject); 
				return; 
			case SelectsPackage.SQML_SELECT_COLUMN:
				sequence_SqmlSelectColumn(context, (SqmlSelectColumn) semanticObject); 
				return; 
			case SelectsPackage.SQML_SELECT_ELSE:
				sequence_SqmlSelectElse(context, (SqmlSelectElse) semanticObject); 
				return; 
			case SelectsPackage.SQML_SELECT_ELSE_IF:
				sequence_SqmlSelectElseIf(context, (SqmlSelectElseIf) semanticObject); 
				return; 
			case SelectsPackage.SQML_SELECT_IF:
				sequence_SqmlSelectIf(context, (SqmlSelectIf) semanticObject); 
				return; 
			case SelectsPackage.SQML_SUB_SELECT_VARIABLE:
				sequence_SqmlSubSelectVariable(context, (SqmlSubSelectVariable) semanticObject); 
				return; 
			case SelectsPackage.SQML_TABLE_VARIABLE:
				sequence_SqmlTableVariable(context, (SqmlTableVariable) semanticObject); 
				return; 
			case SelectsPackage.SQML_WHERE_CLAUSE:
				sequence_SqmlWhereClause(context, (SqmlWhereClause) semanticObject); 
				return; 
			}
		else if (epackage == TablesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TablesPackage.SQML_INDEX_KEY:
				sequence_SqmlTableKey(context, (SqmlIndexKey) semanticObject); 
				return; 
			case TablesPackage.SQML_LITERAL_DEFAULT_VALUE:
				sequence_SqmlLiteralDefaultValue(context, (SqmlLiteralDefaultValue) semanticObject); 
				return; 
			case TablesPackage.SQML_ROW_CONSTRUCTOR_DEFAULT_VALUE:
				sequence_SqmlRowConstructorDefaultValue(context, (SqmlRowConstructorDefaultValue) semanticObject); 
				return; 
			case TablesPackage.SQML_TABLE:
				sequence_SqmlTable(context, (SqmlTable) semanticObject); 
				return; 
			case TablesPackage.SQML_TABLE_COLUMN:
				sequence_SqmlTableColumn(context, (SqmlTableColumn) semanticObject); 
				return; 
			case TablesPackage.SQML_TABLE_ROW:
				sequence_SqmlTableRow(context, (SqmlTableRow) semanticObject); 
				return; 
			case TablesPackage.SQML_TABLE_ROW_VALUE:
				sequence_SqmlTableRowValue(context, (SqmlTableRowValue) semanticObject); 
				return; 
			case TablesPackage.SQML_UNIQUE_KEY:
				sequence_SqmlTableKey(context, (SqmlUniqueKey) semanticObject); 
				return; 
			case TablesPackage.SQML_VALUE_REFERENCE_DEFAULT_VALUE:
				sequence_SqmlValueReferenceDefaultValue(context, (SqmlValueReferenceDefaultValue) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.SQML_ENUM:
				sequence_SqmlEnum(context, (SqmlEnum) semanticObject); 
				return; 
			case TypesPackage.SQML_ENUMERATOR:
				sequence_SqmlEnumerator(context, (SqmlEnumerator) semanticObject); 
				return; 
			case TypesPackage.SQML_TYPE_REFERENCE:
				sequence_SqmlTypeReference(context, (SqmlTypeReference) semanticObject); 
				return; 
			case TypesPackage.SQML_VALUE_TYPE:
				sequence_SqmlValueType(context, (SqmlValueType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlAddition
	 *     SqmlOr returns SqmlAddition
	 *     SqmlOr.SqmlOr_1_0 returns SqmlAddition
	 *     SqmlAnd returns SqmlAddition
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlAddition
	 *     SqmlCondition returns SqmlAddition
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlAddition
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlAddition
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlAddition
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlAddition
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlAddition
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlAddition
	 *     SqmlOperand returns SqmlAddition
	 *     SqmlAddition returns SqmlAddition
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlAddition
	 *
	 * Constraint:
	 *     (left=SqmlAddition_SqmlAddition_1_0 function=[SqmlFunction|SqmlAdditionOperator] right=SqmlMultiplication)
	 */
	protected void sequence_SqmlAddition(ISerializationContext context, SqmlAddition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__FUNCTION));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlAdditionAccess().getSqmlAdditionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlAdditionAccess().getFunctionSqmlFunctionSqmlAdditionOperatorParserRuleCall_1_1_0_1(), semanticObject.eGet(ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__FUNCTION, false));
		feeder.accept(grammarAccess.getSqmlAdditionAccess().getRightSqmlMultiplicationParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlAnd
	 *     SqmlOr returns SqmlAnd
	 *     SqmlOr.SqmlOr_1_0 returns SqmlAnd
	 *     SqmlAnd returns SqmlAnd
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlAnd
	 *
	 * Constraint:
	 *     (left=SqmlAnd_SqmlAnd_1_0 right=SqmlCondition)
	 */
	protected void sequence_SqmlAnd(ISerializationContext context, SqmlAnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlAndAccess().getSqmlAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlAndAccess().getRightSqmlConditionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlBooleanLiteral
	 *     SqmlOr returns SqmlBooleanLiteral
	 *     SqmlOr.SqmlOr_1_0 returns SqmlBooleanLiteral
	 *     SqmlAnd returns SqmlBooleanLiteral
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlBooleanLiteral
	 *     SqmlCondition returns SqmlBooleanLiteral
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlBooleanLiteral
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlBooleanLiteral
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlBooleanLiteral
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlBooleanLiteral
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlBooleanLiteral
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlBooleanLiteral
	 *     SqmlOperand returns SqmlBooleanLiteral
	 *     SqmlAddition returns SqmlBooleanLiteral
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlBooleanLiteral
	 *     SqmlMultiplication returns SqmlBooleanLiteral
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlBooleanLiteral
	 *     SqmlPrimay returns SqmlBooleanLiteral
	 *     SqmlLiteral returns SqmlBooleanLiteral
	 *     SqmlBooleanLiteral returns SqmlBooleanLiteral
	 *
	 * Constraint:
	 *     true?='TRUE'?
	 */
	protected void sequence_SqmlBooleanLiteral(ISerializationContext context, SqmlBooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlCaseWhen returns SqmlCaseWhen
	 *
	 * Constraint:
	 *     (whenExpression=SqmlExpression thenExpression=SqmlExpression)
	 */
	protected void sequence_SqmlCaseWhen(ISerializationContext context, SqmlCaseWhen semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_CASE_WHEN__WHEN_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_CASE_WHEN__WHEN_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_CASE_WHEN__THEN_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_CASE_WHEN__THEN_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlCaseWhenAccess().getWhenExpressionSqmlExpressionParserRuleCall_1_0(), semanticObject.getWhenExpression());
		feeder.accept(grammarAccess.getSqmlCaseWhenAccess().getThenExpressionSqmlExpressionParserRuleCall_3_0(), semanticObject.getThenExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlCase
	 *     SqmlOr returns SqmlCase
	 *     SqmlOr.SqmlOr_1_0 returns SqmlCase
	 *     SqmlAnd returns SqmlCase
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlCase
	 *     SqmlCondition returns SqmlCase
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlCase
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlCase
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlCase
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlCase
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlCase
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlCase
	 *     SqmlOperand returns SqmlCase
	 *     SqmlAddition returns SqmlCase
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlCase
	 *     SqmlMultiplication returns SqmlCase
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlCase
	 *     SqmlPrimay returns SqmlCase
	 *     SqmlCase returns SqmlCase
	 *
	 * Constraint:
	 *     (operand=SqmlExpression? whens+=SqmlCaseWhen+ elseExpression=SqmlExpression?)
	 */
	protected void sequence_SqmlCase(ISerializationContext context, SqmlCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlBetween
	 *     SqmlOr returns SqmlBetween
	 *     SqmlOr.SqmlOr_1_0 returns SqmlBetween
	 *     SqmlAnd returns SqmlBetween
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlBetween
	 *     SqmlCondition returns SqmlBetween
	 *
	 * Constraint:
	 *     (operand=SqmlCondition_SqmlBetween_2_1_3_0 left=SqmlOperand right=SqmlOperand)
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlBetween semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_BETWEEN__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_BETWEEN__OPERAND));
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_BETWEEN__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_BETWEEN__LEFT));
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_BETWEEN__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_BETWEEN__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlConditionAccess().getSqmlBetweenOperandAction_2_1_3_0(), semanticObject.getOperand());
		feeder.accept(grammarAccess.getSqmlConditionAccess().getLeftSqmlOperandParserRuleCall_2_1_3_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlConditionAccess().getRightSqmlOperandParserRuleCall_2_1_3_4_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlComparison
	 *     SqmlOr returns SqmlComparison
	 *     SqmlOr.SqmlOr_1_0 returns SqmlComparison
	 *     SqmlAnd returns SqmlComparison
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlComparison
	 *     SqmlCondition returns SqmlComparison
	 *
	 * Constraint:
	 *     (left=SqmlCondition_SqmlComparison_2_1_0_0 function=[SqmlFunction|SqmlComparisonOperator] right=SqmlOperand)
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlComparison semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_COMPARISON__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_COMPARISON__LEFT));
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_COMPARISON__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_COMPARISON__FUNCTION));
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_COMPARISON__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_COMPARISON__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlConditionAccess().getSqmlComparisonLeftAction_2_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlConditionAccess().getFunctionSqmlFunctionSqmlComparisonOperatorParserRuleCall_2_1_0_1_0_1(), semanticObject.eGet(ConditionsPackage.Literals.SQML_COMPARISON__FUNCTION, false));
		feeder.accept(grammarAccess.getSqmlConditionAccess().getRightSqmlOperandParserRuleCall_2_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlExists
	 *     SqmlOr returns SqmlExists
	 *     SqmlOr.SqmlOr_1_0 returns SqmlExists
	 *     SqmlAnd returns SqmlExists
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlExists
	 *     SqmlCondition returns SqmlExists
	 *
	 * Constraint:
	 *     subSelect=SqmlSubSelect
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlExists semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_EXISTS__SUB_SELECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_EXISTS__SUB_SELECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlConditionAccess().getSubSelectSqmlSubSelectParserRuleCall_1_2_0(), semanticObject.getSubSelect());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlIn
	 *     SqmlOr returns SqmlIn
	 *     SqmlOr.SqmlOr_1_0 returns SqmlIn
	 *     SqmlAnd returns SqmlIn
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlIn
	 *     SqmlCondition returns SqmlIn
	 *
	 * Constraint:
	 *     (left=SqmlCondition_SqmlIn_2_1_4_0 not?='NOT'? (right=SqmlStaticVariableReference | right=SqmlSubSelect | right=SqmlRowConstructor))
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlIn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlIsNull
	 *     SqmlOr returns SqmlIsNull
	 *     SqmlOr.SqmlOr_1_0 returns SqmlIsNull
	 *     SqmlAnd returns SqmlIsNull
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlIsNull
	 *     SqmlCondition returns SqmlIsNull
	 *
	 * Constraint:
	 *     (operand=SqmlCondition_SqmlIsNull_2_1_2_0 not?='NOT'?)
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlIsNull semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlLike
	 *     SqmlOr returns SqmlLike
	 *     SqmlOr.SqmlOr_1_0 returns SqmlLike
	 *     SqmlAnd returns SqmlLike
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlLike
	 *     SqmlCondition returns SqmlLike
	 *
	 * Constraint:
	 *     (left=SqmlCondition_SqmlLike_2_1_1_0 not?='NOT'? right=SqmlOperand escape=STRING?)
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlLike semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlNot
	 *     SqmlOr returns SqmlNot
	 *     SqmlOr.SqmlOr_1_0 returns SqmlNot
	 *     SqmlAnd returns SqmlNot
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlNot
	 *     SqmlCondition returns SqmlNot
	 *
	 * Constraint:
	 *     condition=SqmlCondition
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlNot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_NOT__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_NOT__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlConditionAccess().getConditionSqmlConditionParserRuleCall_0_2_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlRegexp
	 *     SqmlOr returns SqmlRegexp
	 *     SqmlOr.SqmlOr_1_0 returns SqmlRegexp
	 *     SqmlAnd returns SqmlRegexp
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlRegexp
	 *     SqmlCondition returns SqmlRegexp
	 *
	 * Constraint:
	 *     (operand=SqmlCondition_SqmlRegexp_2_1_5_0 not?='NOT'? regexp=SqmlOperand)
	 */
	protected void sequence_SqmlCondition(ISerializationContext context, SqmlRegexp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlDecimalLiteral
	 *     SqmlOr returns SqmlDecimalLiteral
	 *     SqmlOr.SqmlOr_1_0 returns SqmlDecimalLiteral
	 *     SqmlAnd returns SqmlDecimalLiteral
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlDecimalLiteral
	 *     SqmlCondition returns SqmlDecimalLiteral
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlDecimalLiteral
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlDecimalLiteral
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlDecimalLiteral
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlDecimalLiteral
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlDecimalLiteral
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlDecimalLiteral
	 *     SqmlOperand returns SqmlDecimalLiteral
	 *     SqmlAddition returns SqmlDecimalLiteral
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlDecimalLiteral
	 *     SqmlMultiplication returns SqmlDecimalLiteral
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlDecimalLiteral
	 *     SqmlPrimay returns SqmlDecimalLiteral
	 *     SqmlLiteral returns SqmlDecimalLiteral
	 *     SqmlDecimalLiteral returns SqmlDecimalLiteral
	 *
	 * Constraint:
	 *     value=DECIMAL
	 */
	protected void sequence_SqmlDecimalLiteral(ISerializationContext context, SqmlDecimalLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LiteralsPackage.Literals.SQML_DECIMAL_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LiteralsPackage.Literals.SQML_DECIMAL_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlDecimalLiteralAccess().getValueDECIMALTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlDoubleLiteral
	 *     SqmlOr returns SqmlDoubleLiteral
	 *     SqmlOr.SqmlOr_1_0 returns SqmlDoubleLiteral
	 *     SqmlAnd returns SqmlDoubleLiteral
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlDoubleLiteral
	 *     SqmlCondition returns SqmlDoubleLiteral
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlDoubleLiteral
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlDoubleLiteral
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlDoubleLiteral
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlDoubleLiteral
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlDoubleLiteral
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlDoubleLiteral
	 *     SqmlOperand returns SqmlDoubleLiteral
	 *     SqmlAddition returns SqmlDoubleLiteral
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlDoubleLiteral
	 *     SqmlMultiplication returns SqmlDoubleLiteral
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlDoubleLiteral
	 *     SqmlPrimay returns SqmlDoubleLiteral
	 *     SqmlLiteral returns SqmlDoubleLiteral
	 *     SqmlDoubleLiteral returns SqmlDoubleLiteral
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_SqmlDoubleLiteral(ISerializationContext context, SqmlDoubleLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LiteralsPackage.Literals.SQML_DOUBLE_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LiteralsPackage.Literals.SQML_DOUBLE_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlEnum returns SqmlEnum
	 *
	 * Constraint:
	 *     (name=ID typeReference=SqmlTypeReference? enumerators+=SqmlEnumerator*)
	 */
	protected void sequence_SqmlEnum(ISerializationContext context, SqmlEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlEnumerator returns SqmlEnumerator
	 *
	 * Constraint:
	 *     (name=ID value=SqmlLiteral?)
	 */
	protected void sequence_SqmlEnumerator(ISerializationContext context, SqmlEnumerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlFile returns SqmlFile
	 *
	 * Constraint:
	 *     (packageDeclaration=SqmlPackageDeclaration imports+=SqmlImport* elements+=SqmlFileElement*)
	 */
	protected void sequence_SqmlFile(ISerializationContext context, SqmlFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlFloatLiteral
	 *     SqmlOr returns SqmlFloatLiteral
	 *     SqmlOr.SqmlOr_1_0 returns SqmlFloatLiteral
	 *     SqmlAnd returns SqmlFloatLiteral
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlFloatLiteral
	 *     SqmlCondition returns SqmlFloatLiteral
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlFloatLiteral
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlFloatLiteral
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlFloatLiteral
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlFloatLiteral
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlFloatLiteral
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlFloatLiteral
	 *     SqmlOperand returns SqmlFloatLiteral
	 *     SqmlAddition returns SqmlFloatLiteral
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlFloatLiteral
	 *     SqmlMultiplication returns SqmlFloatLiteral
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlFloatLiteral
	 *     SqmlPrimay returns SqmlFloatLiteral
	 *     SqmlLiteral returns SqmlFloatLiteral
	 *     SqmlFloatLiteral returns SqmlFloatLiteral
	 *
	 * Constraint:
	 *     value=FLOAT
	 */
	protected void sequence_SqmlFloatLiteral(ISerializationContext context, SqmlFloatLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LiteralsPackage.Literals.SQML_FLOAT_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LiteralsPackage.Literals.SQML_FLOAT_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlFloatLiteralAccess().getValueFLOATTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlForeignKeyVariable returns SqmlForeignKeyVariable
	 *
	 * Constraint:
	 *     (variable=[ISqmlVariable|ID] column=[ISqmlColumn|ID] name=ID)
	 */
	protected void sequence_SqmlForeignKeyVariable(ISerializationContext context, SqmlForeignKeyVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__COLUMN));
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlForeignKeyVariableAccess().getVariableISqmlVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__VARIABLE, false));
		feeder.accept(grammarAccess.getSqmlForeignKeyVariableAccess().getColumnISqmlColumnIDTerminalRuleCall_2_0_1(), semanticObject.eGet(SelectsPackage.Literals.SQML_FOREIGN_KEY_VARIABLE__COLUMN, false));
		feeder.accept(grammarAccess.getSqmlForeignKeyVariableAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlFromClause
	 *     SqmlFromClause returns SqmlFromClause
	 *
	 * Constraint:
	 *     (variable=SqmlTableVariable | variable=SqmlSubSelectVariable)
	 */
	protected void sequence_SqmlFromClause(ISerializationContext context, SqmlFromClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlFunctionCall
	 *     SqmlOr returns SqmlFunctionCall
	 *     SqmlOr.SqmlOr_1_0 returns SqmlFunctionCall
	 *     SqmlAnd returns SqmlFunctionCall
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlFunctionCall
	 *     SqmlCondition returns SqmlFunctionCall
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlFunctionCall
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlFunctionCall
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlFunctionCall
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlFunctionCall
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlFunctionCall
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlFunctionCall
	 *     SqmlOperand returns SqmlFunctionCall
	 *     SqmlAddition returns SqmlFunctionCall
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlFunctionCall
	 *     SqmlMultiplication returns SqmlFunctionCall
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlFunctionCall
	 *     SqmlPrimay returns SqmlFunctionCall
	 *     SqmlFunctionCall returns SqmlFunctionCall
	 *
	 * Constraint:
	 *     (function=[SqmlFunction|ID] (arguments+=SqmlOperand arguments+=SqmlOperand*)?)
	 */
	protected void sequence_SqmlFunctionCall(ISerializationContext context, SqmlFunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlFunctionParameter returns SqmlFunctionParameter
	 *
	 * Constraint:
	 *     (typeReference=SqmlTypeReference name=ID)
	 */
	protected void sequence_SqmlFunctionParameter(ISerializationContext context, SqmlFunctionParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunctionsPackage.Literals.SQML_FUNCTION_PARAMETER__TYPE_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunctionsPackage.Literals.SQML_FUNCTION_PARAMETER__TYPE_REFERENCE));
			if (transientValues.isValueTransient(semanticObject, FunctionsPackage.Literals.SQML_FUNCTION_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunctionsPackage.Literals.SQML_FUNCTION_PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlFunctionParameterAccess().getTypeReferenceSqmlTypeReferenceParserRuleCall_0_0(), semanticObject.getTypeReference());
		feeder.accept(grammarAccess.getSqmlFunctionParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlFileElement returns SqmlFunction
	 *     SqmlFunction returns SqmlFunction
	 *
	 * Constraint:
	 *     (
	 *         returnType=SqmlTypeReference 
	 *         name=SqmlFunctionName 
	 *         (parameters+=SqmlFunctionParameter parameters+=SqmlFunctionParameter*)? 
	 *         (expression=SqmlExpression | sql=SqmlSql)
	 *     )
	 */
	protected void sequence_SqmlFunction(ISerializationContext context, SqmlFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlGroupByClause
	 *     SqmlGroupByClause returns SqmlGroupByClause
	 *
	 * Constraint:
	 *     (expressions+=SqmlExpression expressions+=SqmlExpression*)
	 */
	protected void sequence_SqmlGroupByClause(ISerializationContext context, SqmlGroupByClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlGroupConcat
	 *     SqmlOr returns SqmlGroupConcat
	 *     SqmlOr.SqmlOr_1_0 returns SqmlGroupConcat
	 *     SqmlAnd returns SqmlGroupConcat
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlGroupConcat
	 *     SqmlCondition returns SqmlGroupConcat
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlGroupConcat
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlGroupConcat
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlGroupConcat
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlGroupConcat
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlGroupConcat
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlGroupConcat
	 *     SqmlOperand returns SqmlGroupConcat
	 *     SqmlAddition returns SqmlGroupConcat
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlGroupConcat
	 *     SqmlMultiplication returns SqmlGroupConcat
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlGroupConcat
	 *     SqmlPrimay returns SqmlGroupConcat
	 *     SqmlGroupConcat returns SqmlGroupConcat
	 *
	 * Constraint:
	 *     (
	 *         distinct?='DISTINCT'? 
	 *         expressions+=SqmlOperand 
	 *         expressions+=SqmlOperand* 
	 *         (orderByExpressions+=SqmlOrderByExpression orderByExpressions+=SqmlOrderByExpression*)? 
	 *         separator=STRING?
	 *     )
	 */
	protected void sequence_SqmlGroupConcat(ISerializationContext context, SqmlGroupConcat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlHavingClause
	 *     SqmlHavingClause returns SqmlHavingClause
	 *
	 * Constraint:
	 *     condition=SqmlExpression
	 */
	protected void sequence_SqmlHavingClause(ISerializationContext context, SqmlHavingClause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_HAVING_CLAUSE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_HAVING_CLAUSE__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlHavingClauseAccess().getConditionSqmlExpressionParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlIfNull
	 *     SqmlOr returns SqmlIfNull
	 *     SqmlOr.SqmlOr_1_0 returns SqmlIfNull
	 *     SqmlAnd returns SqmlIfNull
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlIfNull
	 *     SqmlCondition returns SqmlIfNull
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlIfNull
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlIfNull
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlIfNull
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlIfNull
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlIfNull
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlIfNull
	 *     SqmlOperand returns SqmlIfNull
	 *     SqmlAddition returns SqmlIfNull
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlIfNull
	 *     SqmlMultiplication returns SqmlIfNull
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlIfNull
	 *     SqmlPrimay returns SqmlIfNull
	 *     SqmlIfNull returns SqmlIfNull
	 *
	 * Constraint:
	 *     (testExpression=SqmlExpression thenExpression=SqmlExpression)
	 */
	protected void sequence_SqmlIfNull(ISerializationContext context, SqmlIfNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_IF_NULL__TEST_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_IF_NULL__TEST_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_IF_NULL__THEN_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_IF_NULL__THEN_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlIfNullAccess().getTestExpressionSqmlExpressionParserRuleCall_2_0(), semanticObject.getTestExpression());
		feeder.accept(grammarAccess.getSqmlIfNullAccess().getThenExpressionSqmlExpressionParserRuleCall_4_0(), semanticObject.getThenExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlIf
	 *     SqmlOr returns SqmlIf
	 *     SqmlOr.SqmlOr_1_0 returns SqmlIf
	 *     SqmlAnd returns SqmlIf
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlIf
	 *     SqmlCondition returns SqmlIf
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlIf
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlIf
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlIf
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlIf
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlIf
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlIf
	 *     SqmlOperand returns SqmlIf
	 *     SqmlAddition returns SqmlIf
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlIf
	 *     SqmlMultiplication returns SqmlIf
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlIf
	 *     SqmlPrimay returns SqmlIf
	 *     SqmlIf returns SqmlIf
	 *
	 * Constraint:
	 *     (condition=SqmlExpression thenExpression=SqmlExpression elseExpression=SqmlExpression)
	 */
	protected void sequence_SqmlIf(ISerializationContext context, SqmlIf semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_IF__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_IF__CONDITION));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_IF__THEN_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_IF__THEN_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_IF__ELSE_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_IF__ELSE_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlIfAccess().getConditionSqmlExpressionParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getSqmlIfAccess().getThenExpressionSqmlExpressionParserRuleCall_4_0(), semanticObject.getThenExpression());
		feeder.accept(grammarAccess.getSqmlIfAccess().getElseExpressionSqmlExpressionParserRuleCall_6_0(), semanticObject.getElseExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlImport returns SqmlImport
	 *
	 * Constraint:
	 *     target=[ISqmlGlobalObject|QualifiedName]
	 */
	protected void sequence_SqmlImport(ISerializationContext context, SqmlImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FilesPackage.Literals.SQML_IMPORT__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FilesPackage.Literals.SQML_IMPORT__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlImportAccess().getTargetISqmlGlobalObjectQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(FilesPackage.Literals.SQML_IMPORT__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlIntegerLiteral
	 *     SqmlOr returns SqmlIntegerLiteral
	 *     SqmlOr.SqmlOr_1_0 returns SqmlIntegerLiteral
	 *     SqmlAnd returns SqmlIntegerLiteral
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlIntegerLiteral
	 *     SqmlCondition returns SqmlIntegerLiteral
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlIntegerLiteral
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlIntegerLiteral
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlIntegerLiteral
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlIntegerLiteral
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlIntegerLiteral
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlIntegerLiteral
	 *     SqmlOperand returns SqmlIntegerLiteral
	 *     SqmlAddition returns SqmlIntegerLiteral
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlIntegerLiteral
	 *     SqmlMultiplication returns SqmlIntegerLiteral
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlIntegerLiteral
	 *     SqmlPrimay returns SqmlIntegerLiteral
	 *     SqmlLiteral returns SqmlIntegerLiteral
	 *     SqmlIntegerLiteral returns SqmlIntegerLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_SqmlIntegerLiteral(ISerializationContext context, SqmlIntegerLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LiteralsPackage.Literals.SQML_INTEGER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LiteralsPackage.Literals.SQML_INTEGER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlIntegerLiteralAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlJoinClause
	 *     SqmlJoinClause returns SqmlJoinClause
	 *
	 * Constraint:
	 *     (leftJoin?='LEFT'? (variable=SqmlForeignKeyVariable | variable=SqmlTableVariable | variable=SqmlSubSelectVariable) conditions+=SqmlExpression*)
	 */
	protected void sequence_SqmlJoinClause(ISerializationContext context, SqmlJoinClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlDefaultValue returns SqmlLiteralDefaultValue
	 *     SqmlLiteralDefaultValue returns SqmlLiteralDefaultValue
	 *
	 * Constraint:
	 *     (minus?='-'? literal=SqmlLiteral)
	 */
	protected void sequence_SqmlLiteralDefaultValue(ISerializationContext context, SqmlLiteralDefaultValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlLongLiteral
	 *     SqmlOr returns SqmlLongLiteral
	 *     SqmlOr.SqmlOr_1_0 returns SqmlLongLiteral
	 *     SqmlAnd returns SqmlLongLiteral
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlLongLiteral
	 *     SqmlCondition returns SqmlLongLiteral
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlLongLiteral
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlLongLiteral
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlLongLiteral
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlLongLiteral
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlLongLiteral
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlLongLiteral
	 *     SqmlOperand returns SqmlLongLiteral
	 *     SqmlAddition returns SqmlLongLiteral
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlLongLiteral
	 *     SqmlMultiplication returns SqmlLongLiteral
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlLongLiteral
	 *     SqmlPrimay returns SqmlLongLiteral
	 *     SqmlLiteral returns SqmlLongLiteral
	 *     SqmlLongLiteral returns SqmlLongLiteral
	 *
	 * Constraint:
	 *     value=LONG
	 */
	protected void sequence_SqmlLongLiteral(ISerializationContext context, SqmlLongLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LiteralsPackage.Literals.SQML_LONG_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LiteralsPackage.Literals.SQML_LONG_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlLongLiteralAccess().getValueLONGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlMultiplication
	 *     SqmlOr returns SqmlMultiplication
	 *     SqmlOr.SqmlOr_1_0 returns SqmlMultiplication
	 *     SqmlAnd returns SqmlMultiplication
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlMultiplication
	 *     SqmlCondition returns SqmlMultiplication
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlMultiplication
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlMultiplication
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlMultiplication
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlMultiplication
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlMultiplication
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlMultiplication
	 *     SqmlOperand returns SqmlMultiplication
	 *     SqmlAddition returns SqmlMultiplication
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlMultiplication
	 *     SqmlMultiplication returns SqmlMultiplication
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlMultiplication
	 *
	 * Constraint:
	 *     (left=SqmlMultiplication_SqmlMultiplication_1_0 function=[SqmlFunction|SqmlMultiplicationOperator] right=SqmlPrimay)
	 */
	protected void sequence_SqmlMultiplication(ISerializationContext context, SqmlMultiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__FUNCTION));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlMultiplicationAccess().getSqmlMultiplicationLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlMultiplicationAccess().getFunctionSqmlFunctionSqmlMultiplicationOperatorParserRuleCall_1_1_0_1(), semanticObject.eGet(ExpressionsPackage.Literals.ABSTRACT_SQML_BINARY_OPERATION__FUNCTION, false));
		feeder.accept(grammarAccess.getSqmlMultiplicationAccess().getRightSqmlPrimayParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlNegation
	 *     SqmlOr returns SqmlNegation
	 *     SqmlOr.SqmlOr_1_0 returns SqmlNegation
	 *     SqmlAnd returns SqmlNegation
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlNegation
	 *     SqmlCondition returns SqmlNegation
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlNegation
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlNegation
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlNegation
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlNegation
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlNegation
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlNegation
	 *     SqmlOperand returns SqmlNegation
	 *     SqmlAddition returns SqmlNegation
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlNegation
	 *     SqmlMultiplication returns SqmlNegation
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlNegation
	 *     SqmlPrimay returns SqmlNegation
	 *     SqmlNegation returns SqmlNegation
	 *
	 * Constraint:
	 *     expression=SqmlPrimay
	 */
	protected void sequence_SqmlNegation(ISerializationContext context, SqmlNegation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_NEGATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_NEGATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlNegationAccess().getExpressionSqmlPrimayParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlOr
	 *     SqmlOr returns SqmlOr
	 *     SqmlOr.SqmlOr_1_0 returns SqmlOr
	 *
	 * Constraint:
	 *     (left=SqmlOr_SqmlOr_1_0 right=SqmlAnd)
	 */
	protected void sequence_SqmlOr(ISerializationContext context, SqmlOr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, ConditionsPackage.Literals.SQML_OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConditionsPackage.Literals.SQML_OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlOrAccess().getSqmlOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlOrAccess().getRightSqmlAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlOrderByClause
	 *     SqmlOrderByClause returns SqmlOrderByClause
	 *
	 * Constraint:
	 *     (expressions+=SqmlOrderByExpression expressions+=SqmlOrderByExpression*)
	 */
	protected void sequence_SqmlOrderByClause(ISerializationContext context, SqmlOrderByClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlOrderByExpression returns SqmlOrderByExpression
	 *
	 * Constraint:
	 *     (expression=SqmlExpression descending?='DESC'?)
	 */
	protected void sequence_SqmlOrderByExpression(ISerializationContext context, SqmlOrderByExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlPackageDeclaration returns SqmlPackageDeclaration
	 *
	 * Constraint:
	 *     name=QualifiedName
	 */
	protected void sequence_SqmlPackageDeclaration(ISerializationContext context, SqmlPackageDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FilesPackage.Literals.SQML_PACKAGE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FilesPackage.Literals.SQML_PACKAGE_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlPath returns SqmlPath
	 *     SqmlPath.SqmlPath_1_0 returns SqmlPath
	 *
	 * Constraint:
	 *     (target=[ISqmlModelElement|ID] | (parent=SqmlPath_SqmlPath_1_0 target=[ISqmlModelElement|ID]))
	 */
	protected void sequence_SqmlPath(ISerializationContext context, SqmlPath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlQueryParameter returns SqmlQueryParameter
	 *
	 * Constraint:
	 *     (optional?='OPTIONAL'? typeReference=SqmlTypeReference name=ID)
	 */
	protected void sequence_SqmlQueryParameter(ISerializationContext context, SqmlQueryParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlFileElement returns SqmlQuery
	 *     SqmlQuery returns SqmlQuery
	 *
	 * Constraint:
	 *     (name=ID parameters+=SqmlQueryParameter* select=SqmlSelect)
	 */
	protected void sequence_SqmlQuery(ISerializationContext context, SqmlQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlDefaultValue returns SqmlRowConstructorDefaultValue
	 *     SqmlRowConstructorDefaultValue returns SqmlRowConstructorDefaultValue
	 *
	 * Constraint:
	 *     (valueReferences+=SqmlValueReference valueReferences+=SqmlValueReference*)?
	 */
	protected void sequence_SqmlRowConstructorDefaultValue(ISerializationContext context, SqmlRowConstructorDefaultValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlRowConstructor
	 *     SqmlOr returns SqmlRowConstructor
	 *     SqmlOr.SqmlOr_1_0 returns SqmlRowConstructor
	 *     SqmlAnd returns SqmlRowConstructor
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlRowConstructor
	 *     SqmlCondition returns SqmlRowConstructor
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlRowConstructor
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlRowConstructor
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlRowConstructor
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlRowConstructor
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlRowConstructor
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlRowConstructor
	 *     SqmlOperand returns SqmlRowConstructor
	 *     SqmlAddition returns SqmlRowConstructor
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlRowConstructor
	 *     SqmlMultiplication returns SqmlRowConstructor
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlRowConstructor
	 *     SqmlPrimay returns SqmlRowConstructor
	 *     SqmlRowConstructor returns SqmlRowConstructor
	 *
	 * Constraint:
	 *     (explicit?='ROW'? expressions+=SqmlExpression expressions+=SqmlExpression*)
	 */
	protected void sequence_SqmlRowConstructor(ISerializationContext context, SqmlRowConstructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlSelectClause
	 *     SqmlSelectClause returns SqmlSelectClause
	 *
	 * Constraint:
	 *     (distinct?='DISTINCT'? columns+=SqmlSelectColumn columns+=SqmlSelectColumn*)
	 */
	protected void sequence_SqmlSelectClause(ISerializationContext context, SqmlSelectClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectColumn returns SqmlSelectColumn
	 *
	 * Constraint:
	 *     (expression=SqmlExpression alias=ID? title=STRING?)
	 */
	protected void sequence_SqmlSelectColumn(ISerializationContext context, SqmlSelectColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectElseIf returns SqmlSelectElseIf
	 *
	 * Constraint:
	 *     (condition=SqmlStaticExpression parts+=SqmlSelectPart*)
	 */
	protected void sequence_SqmlSelectElseIf(ISerializationContext context, SqmlSelectElseIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectElse returns SqmlSelectElse
	 *
	 * Constraint:
	 *     parts+=SqmlSelectPart*
	 */
	protected void sequence_SqmlSelectElse(ISerializationContext context, SqmlSelectElse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlSelectIf
	 *     SqmlSelectIf returns SqmlSelectIf
	 *
	 * Constraint:
	 *     (condition=SqmlStaticExpression parts+=SqmlSelectPart* elseIfs+=SqmlSelectElseIf* else=SqmlSelectElse?)
	 */
	protected void sequence_SqmlSelectIf(ISerializationContext context, SqmlSelectIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelect returns SqmlSelect
	 *
	 * Constraint:
	 *     parts+=SqmlSelectPart+
	 */
	protected void sequence_SqmlSelect(ISerializationContext context, SqmlSelect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSqlToken returns SqmlSqlId
	 *     SqmlSqlId returns SqmlSqlId
	 *
	 * Constraint:
	 *     identifier=ID
	 */
	protected void sequence_SqmlSqlId(ISerializationContext context, SqmlSqlId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunctionsPackage.Literals.SQML_SQL_ID__IDENTIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunctionsPackage.Literals.SQML_SQL_ID__IDENTIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlSqlIdAccess().getIdentifierIDTerminalRuleCall_0(), semanticObject.getIdentifier());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSqlToken returns SqmlSqlKeyword
	 *     SqmlSqlKeyword returns SqmlSqlKeyword
	 *
	 * Constraint:
	 *     (
	 *         keywordText='ACTION' | 
	 *         keywordText='AND' | 
	 *         keywordText='AS' | 
	 *         keywordText='ASC' | 
	 *         keywordText='BASE' | 
	 *         keywordText='BETWEEN' | 
	 *         keywordText='BITS' | 
	 *         keywordText='BY' | 
	 *         keywordText='CASCADE' | 
	 *         keywordText='CASE' | 
	 *         keywordText='CHARACTER' | 
	 *         keywordText='COLLATION' | 
	 *         keywordText='COMMENT' | 
	 *         keywordText='CONSTRAINT_NAME' | 
	 *         keywordText='DEFAULT' | 
	 *         keywordText='DELETE' | 
	 *         keywordText='DESC' | 
	 *         keywordText='DISTINCT' | 
	 *         keywordText='ELSE' | 
	 *         keywordText='EMPTY' | 
	 *         keywordText='END' | 
	 *         keywordText='ENUM' | 
	 *         keywordText='ESCAPE' | 
	 *         keywordText='EXISTS' | 
	 *         keywordText='FALSE' | 
	 *         keywordText='FOR' | 
	 *         keywordText='FROM' | 
	 *         keywordText='FUNCTION' | 
	 *         keywordText='GROUP' | 
	 *         keywordText='GROUP_CONCAT' | 
	 *         keywordText='HAVING' | 
	 *         keywordText='IF' | 
	 *         keywordText='IFNULL' | 
	 *         keywordText='IK' | 
	 *         keywordText='IMPORT' | 
	 *         keywordText='IN' | 
	 *         keywordText='IS' | 
	 *         keywordText='JOIN' | 
	 *         keywordText='LEFT' | 
	 *         keywordText='LENGTHBITS' | 
	 *         keywordText='LIKE' | 
	 *         keywordText='MAXLENGTH' | 
	 *         keywordText='NEXT' | 
	 *         keywordText='NO_ACTION' | 
	 *         keywordText='NOT' | 
	 *         keywordText='NOW' | 
	 *         keywordText='NULL' | 
	 *         keywordText='NULLABLE' | 
	 *         keywordText='ON' | 
	 *         keywordText='OPTIONAL' | 
	 *         keywordText='OR' | 
	 *         keywordText='ORDER' | 
	 *         keywordText='PACKAGE' | 
	 *         keywordText='PK' | 
	 *         keywordText='PRECISION' | 
	 *         keywordText='QUERY' | 
	 *         keywordText='REGEXP' | 
	 *         keywordText='RESTRICT' | 
	 *         keywordText='ROW' | 
	 *         keywordText='SELECT' | 
	 *         keywordText='SEPARATOR' | 
	 *         keywordText='SERIAL' | 
	 *         keywordText='SET' | 
	 *         keywordText='SET_DEFAULT' | 
	 *         keywordText='SET_NULL' | 
	 *         keywordText='SQL' | 
	 *         keywordText='STATIC' | 
	 *         keywordText='TABLE' | 
	 *         keywordText='THEN' | 
	 *         keywordText='TIMESTAMP' | 
	 *         keywordText='TITLE' | 
	 *         keywordText='TRUE' | 
	 *         keywordText='UK' | 
	 *         keywordText='UNSIGNED' | 
	 *         keywordText='UPDATE' | 
	 *         keywordText='VALUETYPE' | 
	 *         keywordText='WHEN' | 
	 *         keywordText='WHERE'
	 *     )
	 */
	protected void sequence_SqmlSqlKeyword(ISerializationContext context, SqmlSqlKeyword semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSqlToken returns SqmlSqlNumberLiteral
	 *     SqmlSqlNumberLiteral returns SqmlSqlNumberLiteral
	 *
	 * Constraint:
	 *     (integer=INT | decimal=DECIMAL)
	 */
	protected void sequence_SqmlSqlNumberLiteral(ISerializationContext context, SqmlSqlNumberLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSqlToken returns SqmlSqlStringLiteral
	 *     SqmlSqlStringLiteral returns SqmlSqlStringLiteral
	 *
	 * Constraint:
	 *     string=STRING
	 */
	protected void sequence_SqmlSqlStringLiteral(ISerializationContext context, SqmlSqlStringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FunctionsPackage.Literals.SQML_SQL_STRING_LITERAL__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FunctionsPackage.Literals.SQML_SQL_STRING_LITERAL__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlSqlStringLiteralAccess().getStringSTRINGTerminalRuleCall_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSqlToken returns SqmlSqlSymbol
	 *     SqmlSqlSymbol returns SqmlSqlSymbol
	 *
	 * Constraint:
	 *     (
	 *         symbolText='+' | 
	 *         symbolText='-' | 
	 *         symbolText='*' | 
	 *         symbolText='/' | 
	 *         symbolText='%' | 
	 *         symbolText='|' | 
	 *         symbolText='&' | 
	 *         symbolText='^' | 
	 *         symbolText='~' | 
	 *         symbolText='(' | 
	 *         symbolText=')' | 
	 *         symbolText='.' | 
	 *         symbolText=',' | 
	 *         symbolText='=' | 
	 *         symbolText='<>' | 
	 *         symbolText='!=' | 
	 *         symbolText='<' | 
	 *         symbolText='<=' | 
	 *         symbolText='>' | 
	 *         symbolText='>='
	 *     )
	 */
	protected void sequence_SqmlSqlSymbol(ISerializationContext context, SqmlSqlSymbol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSql returns SqmlSql
	 *
	 * Constraint:
	 *     tokens+=SqmlSqlToken*
	 */
	protected void sequence_SqmlSql(ISerializationContext context, SqmlSql semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlStaticExpression returns SqmlStaticAnd
	 *     SqmlStaticOr returns SqmlStaticAnd
	 *     SqmlStaticOr.SqmlStaticOr_1_0 returns SqmlStaticAnd
	 *     SqmlStaticAnd returns SqmlStaticAnd
	 *     SqmlStaticAnd.SqmlStaticAnd_1_0 returns SqmlStaticAnd
	 *
	 * Constraint:
	 *     (left=SqmlStaticAnd_SqmlStaticAnd_1_0 right=SqmlStaticAtom)
	 */
	protected void sequence_SqmlStaticAnd(ISerializationContext context, SqmlStaticAnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlStaticAndAccess().getSqmlStaticAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlStaticAndAccess().getRightSqmlStaticAtomParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlStaticIf
	 *     SqmlOr returns SqmlStaticIf
	 *     SqmlOr.SqmlOr_1_0 returns SqmlStaticIf
	 *     SqmlAnd returns SqmlStaticIf
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlStaticIf
	 *     SqmlCondition returns SqmlStaticIf
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlStaticIf
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlStaticIf
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlStaticIf
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlStaticIf
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlStaticIf
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlStaticIf
	 *     SqmlOperand returns SqmlStaticIf
	 *     SqmlAddition returns SqmlStaticIf
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlStaticIf
	 *     SqmlMultiplication returns SqmlStaticIf
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlStaticIf
	 *     SqmlPrimay returns SqmlStaticIf
	 *     SqmlStaticIf returns SqmlStaticIf
	 *
	 * Constraint:
	 *     (
	 *         conditions+=SqmlStaticExpression 
	 *         expressions+=SqmlExpression 
	 *         (conditions+=SqmlStaticExpression expressions+=SqmlExpression)* 
	 *         elseExpression=SqmlExpression?
	 *     )
	 */
	protected void sequence_SqmlStaticIf(ISerializationContext context, SqmlStaticIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlStaticExpression returns SqmlStaticIsEmpty
	 *     SqmlStaticOr returns SqmlStaticIsEmpty
	 *     SqmlStaticOr.SqmlStaticOr_1_0 returns SqmlStaticIsEmpty
	 *     SqmlStaticAnd returns SqmlStaticIsEmpty
	 *     SqmlStaticAnd.SqmlStaticAnd_1_0 returns SqmlStaticIsEmpty
	 *     SqmlStaticAtom returns SqmlStaticIsEmpty
	 *     SqmlStaticIsEmpty returns SqmlStaticIsEmpty
	 *
	 * Constraint:
	 *     (parameterReference=SqmlStaticVariableReference not?='NOT'?)
	 */
	protected void sequence_SqmlStaticIsEmpty(ISerializationContext context, SqmlStaticIsEmpty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlStaticExpression returns SqmlStaticIsNull
	 *     SqmlStaticOr returns SqmlStaticIsNull
	 *     SqmlStaticOr.SqmlStaticOr_1_0 returns SqmlStaticIsNull
	 *     SqmlStaticAnd returns SqmlStaticIsNull
	 *     SqmlStaticAnd.SqmlStaticAnd_1_0 returns SqmlStaticIsNull
	 *     SqmlStaticAtom returns SqmlStaticIsNull
	 *     SqmlStaticIsNull returns SqmlStaticIsNull
	 *
	 * Constraint:
	 *     (parameterReference=SqmlStaticVariableReference not?='NOT'?)
	 */
	protected void sequence_SqmlStaticIsNull(ISerializationContext context, SqmlStaticIsNull semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlStaticExpression returns SqmlStaticIsTrue
	 *     SqmlStaticOr returns SqmlStaticIsTrue
	 *     SqmlStaticOr.SqmlStaticOr_1_0 returns SqmlStaticIsTrue
	 *     SqmlStaticAnd returns SqmlStaticIsTrue
	 *     SqmlStaticAnd.SqmlStaticAnd_1_0 returns SqmlStaticIsTrue
	 *     SqmlStaticAtom returns SqmlStaticIsTrue
	 *     SqmlStaticIsTrue returns SqmlStaticIsTrue
	 *
	 * Constraint:
	 *     (not?='NOT'? parameterReference=SqmlStaticVariableReference)
	 */
	protected void sequence_SqmlStaticIsTrue(ISerializationContext context, SqmlStaticIsTrue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlStaticExpression returns SqmlStaticOr
	 *     SqmlStaticOr returns SqmlStaticOr
	 *     SqmlStaticOr.SqmlStaticOr_1_0 returns SqmlStaticOr
	 *
	 * Constraint:
	 *     (left=SqmlStaticOr_SqmlStaticOr_1_0 right=SqmlStaticAnd)
	 */
	protected void sequence_SqmlStaticOr(ISerializationContext context, SqmlStaticOr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlStaticOrAccess().getSqmlStaticOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSqmlStaticOrAccess().getRightSqmlStaticAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlStaticExpression returns SqmlStaticParentheses
	 *     SqmlStaticOr returns SqmlStaticParentheses
	 *     SqmlStaticOr.SqmlStaticOr_1_0 returns SqmlStaticParentheses
	 *     SqmlStaticAnd returns SqmlStaticParentheses
	 *     SqmlStaticAnd.SqmlStaticAnd_1_0 returns SqmlStaticParentheses
	 *     SqmlStaticAtom returns SqmlStaticParentheses
	 *     SqmlStaticParentheses returns SqmlStaticParentheses
	 *
	 * Constraint:
	 *     expression=SqmlStaticExpression
	 */
	protected void sequence_SqmlStaticParentheses(ISerializationContext context, SqmlStaticParentheses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_PARENTHESES__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_STATIC_PARENTHESES__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlStaticParenthesesAccess().getExpressionSqmlStaticExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSqlToken returns SqmlStaticVariableReference
	 *     SqmlExpression returns SqmlStaticVariableReference
	 *     SqmlOr returns SqmlStaticVariableReference
	 *     SqmlOr.SqmlOr_1_0 returns SqmlStaticVariableReference
	 *     SqmlAnd returns SqmlStaticVariableReference
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlStaticVariableReference
	 *     SqmlCondition returns SqmlStaticVariableReference
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlStaticVariableReference
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlStaticVariableReference
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlStaticVariableReference
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlStaticVariableReference
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlStaticVariableReference
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlStaticVariableReference
	 *     SqmlOperand returns SqmlStaticVariableReference
	 *     SqmlAddition returns SqmlStaticVariableReference
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlStaticVariableReference
	 *     SqmlMultiplication returns SqmlStaticVariableReference
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlStaticVariableReference
	 *     SqmlPrimay returns SqmlStaticVariableReference
	 *     SqmlStaticVariableReference returns SqmlStaticVariableReference
	 *
	 * Constraint:
	 *     (nextIteration?='NEXT'? variable=[ISqmlStaticVariable|ID])
	 */
	protected void sequence_SqmlStaticVariableReference(ISerializationContext context, SqmlStaticVariableReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlStringLiteral
	 *     SqmlOr returns SqmlStringLiteral
	 *     SqmlOr.SqmlOr_1_0 returns SqmlStringLiteral
	 *     SqmlAnd returns SqmlStringLiteral
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlStringLiteral
	 *     SqmlCondition returns SqmlStringLiteral
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlStringLiteral
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlStringLiteral
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlStringLiteral
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlStringLiteral
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlStringLiteral
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlStringLiteral
	 *     SqmlOperand returns SqmlStringLiteral
	 *     SqmlAddition returns SqmlStringLiteral
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlStringLiteral
	 *     SqmlMultiplication returns SqmlStringLiteral
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlStringLiteral
	 *     SqmlPrimay returns SqmlStringLiteral
	 *     SqmlLiteral returns SqmlStringLiteral
	 *     SqmlStringLiteral returns SqmlStringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_SqmlStringLiteral(ISerializationContext context, SqmlStringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LiteralsPackage.Literals.SQML_STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LiteralsPackage.Literals.SQML_STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSubSelectVariable returns SqmlSubSelectVariable
	 *
	 * Constraint:
	 *     (subSelect=SqmlSelect name=ID)
	 */
	protected void sequence_SqmlSubSelectVariable(ISerializationContext context, SqmlSubSelectVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_SUB_SELECT_VARIABLE__SUB_SELECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_SUB_SELECT_VARIABLE__SUB_SELECT));
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_SUB_SELECT_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_SUB_SELECT_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlSubSelectVariableAccess().getSubSelectSqmlSelectParserRuleCall_1_0(), semanticObject.getSubSelect());
		feeder.accept(grammarAccess.getSqmlSubSelectVariableAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSubSelect returns SqmlSubSelect
	 *
	 * Constraint:
	 *     select=SqmlSelect
	 */
	protected void sequence_SqmlSubSelect(ISerializationContext context, SqmlSubSelect semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExpressionsPackage.Literals.SQML_SUB_SELECT__SELECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExpressionsPackage.Literals.SQML_SUB_SELECT__SELECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlSubSelectAccess().getSelectSqmlSelectParserRuleCall_1_0(), semanticObject.getSelect());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlTableColumn returns SqmlTableColumn
	 *
	 * Constraint:
	 *     (
	 *         primaryKey?='PK'? 
	 *         typeReference=SqmlTypeReference 
	 *         name=ID 
	 *         (defaultValue=SqmlDefaultValue | defaultNull?='NULL' | defaultNow?='NOW' | serial?='SERIAL' | baseColumn?='BASE')? 
	 *         nullable?='NULLABLE'? 
	 *         (
	 *             (
	 *                 timestamp?='TIMESTAMP' | 
	 *                 unsigned?='UNSIGNED' | 
	 *                 onDeleteAction=SqmlForeignKeyAction | 
	 *                 onUpdateAction=SqmlForeignKeyAction | 
	 *                 onUpdateNow?='NOW' | 
	 *                 physicalNameOverride=STRING | 
	 *                 bits=INT | 
	 *                 (precision=INT scale=INT) | 
	 *                 maxLength=INT | 
	 *                 lengthBits=INT | 
	 *                 characterSet=STRING | 
	 *                 collation=STRING | 
	 *                 comment=STRING | 
	 *                 constraintName=STRING
	 *             )? 
	 *             nullable?='NULLABLE'?
	 *         )*
	 *     )
	 */
	protected void sequence_SqmlTableColumn(ISerializationContext context, SqmlTableColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlTableKey returns SqmlIndexKey
	 *
	 * Constraint:
	 *     (columns+=[ISqmlTableColumn|ID]* name=ID?)
	 */
	protected void sequence_SqmlTableKey(ISerializationContext context, SqmlIndexKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlTableKey returns SqmlUniqueKey
	 *
	 * Constraint:
	 *     (columns+=[ISqmlTableColumn|ID]* name=ID?)
	 */
	protected void sequence_SqmlTableKey(ISerializationContext context, SqmlUniqueKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlTableRowValue returns SqmlTableRowValue
	 *
	 * Constraint:
	 *     (literal=SqmlLiteral | null?='NULL')
	 */
	protected void sequence_SqmlTableRowValue(ISerializationContext context, SqmlTableRowValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlTableRow returns SqmlTableRow
	 *
	 * Constraint:
	 *     (values+=SqmlTableRowValue values+=SqmlTableRowValue*)
	 */
	protected void sequence_SqmlTableRow(ISerializationContext context, SqmlTableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlTableVariable returns SqmlTableVariable
	 *
	 * Constraint:
	 *     (table=[ISqmlTable|ID] name=ID)
	 */
	protected void sequence_SqmlTableVariable(ISerializationContext context, SqmlTableVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_TABLE_VARIABLE__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_TABLE_VARIABLE__TABLE));
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_TABLE_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_TABLE_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlTableVariableAccess().getTableISqmlTableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SelectsPackage.Literals.SQML_TABLE_VARIABLE__TABLE, false));
		feeder.accept(grammarAccess.getSqmlTableVariableAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlFileElement returns SqmlTable
	 *     SqmlTable returns SqmlTable
	 *
	 * Constraint:
	 *     (
	 *         enumTable?='ENUM'? 
	 *         name=ID 
	 *         physicalNameOverride=STRING 
	 *         columns+=SqmlTableColumn* 
	 *         tableKeys+=SqmlTableKey* 
	 *         enums+=SqmlEnum* 
	 *         rows+=SqmlTableRow*
	 *     )
	 */
	protected void sequence_SqmlTable(ISerializationContext context, SqmlTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlTypeReference returns SqmlTypeReference
	 *
	 * Constraint:
	 *     (typeDefinition=[ISqmlTypeDefinition|QualifiedName] (typeParameters+=SqmlTypeReference typeParameters+=SqmlTypeReference*)? list?='['?)
	 */
	protected void sequence_SqmlTypeReference(ISerializationContext context, SqmlTypeReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlDefaultValue returns SqmlValueReferenceDefaultValue
	 *     SqmlValueReferenceDefaultValue returns SqmlValueReferenceDefaultValue
	 *
	 * Constraint:
	 *     valueReference=SqmlValueReference
	 */
	protected void sequence_SqmlValueReferenceDefaultValue(ISerializationContext context, SqmlValueReferenceDefaultValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TablesPackage.Literals.SQML_VALUE_REFERENCE_DEFAULT_VALUE__VALUE_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TablesPackage.Literals.SQML_VALUE_REFERENCE_DEFAULT_VALUE__VALUE_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlValueReferenceDefaultValueAccess().getValueReferenceSqmlValueReferenceParserRuleCall_0(), semanticObject.getValueReference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlExpression returns SqmlValueReference
	 *     SqmlOr returns SqmlValueReference
	 *     SqmlOr.SqmlOr_1_0 returns SqmlValueReference
	 *     SqmlAnd returns SqmlValueReference
	 *     SqmlAnd.SqmlAnd_1_0 returns SqmlValueReference
	 *     SqmlCondition returns SqmlValueReference
	 *     SqmlCondition.SqmlComparison_2_1_0_0 returns SqmlValueReference
	 *     SqmlCondition.SqmlLike_2_1_1_0 returns SqmlValueReference
	 *     SqmlCondition.SqmlIsNull_2_1_2_0 returns SqmlValueReference
	 *     SqmlCondition.SqmlBetween_2_1_3_0 returns SqmlValueReference
	 *     SqmlCondition.SqmlIn_2_1_4_0 returns SqmlValueReference
	 *     SqmlCondition.SqmlRegexp_2_1_5_0 returns SqmlValueReference
	 *     SqmlOperand returns SqmlValueReference
	 *     SqmlAddition returns SqmlValueReference
	 *     SqmlAddition.SqmlAddition_1_0 returns SqmlValueReference
	 *     SqmlMultiplication returns SqmlValueReference
	 *     SqmlMultiplication.SqmlMultiplication_1_0 returns SqmlValueReference
	 *     SqmlPrimay returns SqmlValueReference
	 *     SqmlValueReference returns SqmlValueReference
	 *
	 * Constraint:
	 *     (nextIteration?='NEXT'? path=SqmlPath dotStar?='.*'?)
	 */
	protected void sequence_SqmlValueReference(ISerializationContext context, SqmlValueReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SqmlFileElement returns SqmlValueType
	 *     SqmlValueType returns SqmlValueType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SqmlValueType(ISerializationContext context, SqmlValueType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FilesPackage.Literals.SQML_FILE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FilesPackage.Literals.SQML_FILE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlValueTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SqmlSelectPart returns SqmlWhereClause
	 *     SqmlWhereClause returns SqmlWhereClause
	 *
	 * Constraint:
	 *     condition=SqmlExpression
	 */
	protected void sequence_SqmlWhereClause(ISerializationContext context, SqmlWhereClause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SelectsPackage.Literals.SQML_WHERE_CLAUSE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SelectsPackage.Literals.SQML_WHERE_CLAUSE__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSqmlWhereClauseAccess().getConditionSqmlExpressionParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
}
