/*
 * generated by Xtext
 */
package com.softicar.sqml.serializer;

import com.google.inject.Inject;
import com.softicar.sqml.services.SqmlGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SqmlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SqmlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_SqmlForeignKeyVariable_ASKeyword_3_q;
	protected AbstractElementAlias match_SqmlOrderByExpression_ASCKeyword_1_0_q;
	protected AbstractElementAlias match_SqmlSubSelectVariable_ASKeyword_3_q;
	protected AbstractElementAlias match_SqmlTableColumn___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q;
	protected AbstractElementAlias match_SqmlTableVariable_ASKeyword_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SqmlGrammarAccess) access;
		match_SqmlForeignKeyVariable_ASKeyword_3_q = new TokenAlias(false, true, grammarAccess.getSqmlForeignKeyVariableAccess().getASKeyword_3());
		match_SqmlOrderByExpression_ASCKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getSqmlOrderByExpressionAccess().getASCKeyword_1_0());
		match_SqmlSubSelectVariable_ASKeyword_3_q = new TokenAlias(false, true, grammarAccess.getSqmlSubSelectVariableAccess().getASKeyword_3());
		match_SqmlTableColumn___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSqmlTableColumnAccess().getLeftSquareBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getSqmlTableColumnAccess().getRightSquareBracketKeyword_4_2()));
		match_SqmlTableVariable_ASKeyword_1_q = new TokenAlias(false, true, grammarAccess.getSqmlTableVariableAccess().getASKeyword_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_SqmlForeignKeyVariable_ASKeyword_3_q.equals(syntax))
				emit_SqmlForeignKeyVariable_ASKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SqmlOrderByExpression_ASCKeyword_1_0_q.equals(syntax))
				emit_SqmlOrderByExpression_ASCKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SqmlSubSelectVariable_ASKeyword_3_q.equals(syntax))
				emit_SqmlSubSelectVariable_ASKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SqmlTableColumn___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q.equals(syntax))
				emit_SqmlTableColumn___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SqmlTableVariable_ASKeyword_1_q.equals(syntax))
				emit_SqmlTableVariable_ASKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     column=[ISqmlColumn|ID] (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_SqmlForeignKeyVariable_ASKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'ASC'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=SqmlExpression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_SqmlOrderByExpression_ASCKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     subSelect=SqmlSelect ')' (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_SqmlSubSelectVariable_ASKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     baseColumn?='BASE' (ambiguity) (rule end)
	 *     defaultNow?='NOW' (ambiguity) (rule end)
	 *     defaultNull?='NULL' (ambiguity) (rule end)
	 *     defaultValue=SqmlDefaultValue (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     serial?='SERIAL' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_SqmlTableColumn___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     table=[ISqmlTable|ID] (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_SqmlTableVariable_ASKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
